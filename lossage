This file describes cases where platforms we care about do not
correctly implement the ANSI C and POSIX specifications.  The cases
described are:

	getpgrp() and SunOS 4.x
	strerror() and SunOS

getpgrp() and Ultrix, SunOS 4.x
-------------------------------

The BSD 4.3 getpgrp() interface takes a process ID argument indicating
which process one wants the process group of.  POSIX "simplified" the
getpgrp() interface by eliminating the argument and assuming the
calling process's ID.  SunOS has "POSIX" and "System V" environments
which have the correct getpgrp() interface, but we don't use those
environments.

For a program using autoconf, put AC_FUNC_GETPGRP in your configure.in
file.  Otherwise, an appropriate way to detect the problem is:

	#define GETPGRP_VOID
	#if defined(sun) && !defined(SOLARIS)
	/* SunOS 4.1.3_U1 uses the old BSD interface for getpgrp(),
	 * which takes an argument.  Use the BSD getpgrp() interface
	 * instead of the POSIX interface. */
	#undef GETPGRP_VOID
	#endif

Then use code like:

	#ifndef GETPGRP_VOID
	#include <sys/types.h>
	static pid_t bsd_emulate_getpgrp()
	{
	    return getpgrp(getpid());
	}
	#define getpgrp bsd_emulate_getpgrp
	#endif

strerror() and SunOS
--------------------

The standard way of getting the error message for an error value in
ANSI C is the function strerror().  SunOS does not define strerror().

An incorrect solution is to declare sys_nerr and sys_errlist and use
them directly.  Not only is this solution nonstandard, but modern
operating systems often have their own declarations of those
variables, which may conflict with your declarations.

For a program using autoconf, put AC_CHECK_FUNC(strerror) in your
configure.in.  Otherwise, an appropriate way to detect the problem is:

	#define HAVE_STRERROR
	#if defined(sun) && !defined(SOLARIS)
	/* SunOS 4.1.3_U1 doesn't have strerror().  Use sys_errlist
	 * instead. */
	#undef HAVE_STRERROR
	#endif

Then use code like:

	#ifndef HAVE_STRERROR
	extern const char *const sys_errlist[];
	#define strerror(x) (sys_errlist[x])
	#endif
