This document explains how to build packages from the Athena source
tree, and then describes guidelines for designing the build system for
code we maintain in the Athena source tree.  A discussion of building
packages we get from third parties is in the file "third-party" in
this directory.

This file contains the following sections:

	Using the Athena build system
	Generic build system guidelines
	Using Autoconf
	Using a straight Makefile

Building packages from the source tree
--------------------------------------

The general steps involved in building package from the source tree are:

	set src=/afs/dev.mit.edu/source/src-current
	mkdir /var/tmp/pkgname
	cd /var/tmp/pkgname
	synctree -s $src/path-to-package -d . -a $src/.rconf
	sh $src/packs/build/do.sh -s $src configure
	sh $src/packs/build/do.sh -s $src all

You may find it convenient to have an alias "do" which runs
packs/build/do.sh out of the source tree with the appropriate -s
parameter.  Without a -s parameter, "do" assumes the source tree is
located in /source.  (Right now, the source locker still points to the
8.0 source tree, so /source is not generally useful unless you make
the symlink by hand.)

"do" recognizes supports the following build operations:

	configure	Set up the source tree for building
	clean		Clean any files generated by the "all" operation
	all		Create automatically generated files
	check		Perform automated tests, if any
	install		Install in /srvd (or dir given by -d option)

Generic build system guidelines
-------------------------------

Here are some desirable properties of a build system for programs or
libraries, regardless of how it is implemented:

	* It should use feature tests, not platform tests.

	* Once the appropriate configuration steps (e.g. running
	  configure or imake) have been done, "make all" should
	  generate all automatically generated files without ever
	  modifying any source files.  (For example, "make all" should
	  not try to regenerate configure from configure.in, and a
	  build system should not wait until "make install" time to
	  generate a file which is going to be installed.)

	* "make install" should install all files appropriate for the
	  target directories without modifying any files in the build
	  tree.  In particular, it should not depend on the "all"
	  target.

	  "make install" should use the install command to install
	  files, not cp or tar or shell redirection.  It should avoid
	  using for loops to install multiple files unless there is
	  some preexisting reason to store that list of files as a
	  variable.  It should not generate the files it is installing.

	* "make clean" should clean all files generated by "make all."
	  "make distclean" should also delete files generated by the
	  configuration steps.

	* "make check" should run self-tests.  It should not assume
	  that the program has been installed, but it should assume
	  that the program has been built.  It should not modify the
	  build tree in any way; in particular, it should not depend
	  on the "all" target.  If there are no self-tests, "make
	  check" should not generate an error.

	* In a multi-directory source tree, it should be possible to
	  change to a subdirectory of the build tree and run any of
	  the aforementioned make targets with the same results as
	  having descended into that directory from above.  It is okay
	  to assume that previous parts of the build tree have been
	  built, but it is not okay to rely on make command-line
	  parameters passed in from the parent directory.

Using Autoconf
--------------

For packages in the "athena" hierarchy, we use autoconf.  Autoconf is
not perfect, but it's the only reasonable package out there for doing
feature tests as opposed to platform tests.  See the Autoconf info
pages (available in the default emacs info menu) for information about
using Autoconf in general.

When we build the program for the Athena environment, we will use a
config.site file (already written; you don't need to write it or point
to it) which does the following:

	* Sets the shell variable "athena" to "true".

	* Sets the appropriate compiler (using the CC environment
	  variable) as well as other compilation tools (yacc, lex) for
	  the platform in question.

	* Sets the appropriate X include path and library path for use
	  with AC_PATH_X.

	* Sets the appropriate value of with_motif for use with
	  AC_WITH_MOTIF, which should be used as follows if you want
	  to use the Motif library:

		# Near the beginning.
		AC_ARG_WITH(motif,
			    [  --with-motif=PREFIX     Compile with Motif],
			    [motif="$withval"], [motif=no])

		# Where you do checks for header files.
		AC_PATH_XTRA

		# Where you do checks for libraries.
		if test "$motif" != "no"; then
			if test "$motif" != "yes"; then
				CPPFLAGS="${CPPFLAGS} -I$motif/include"
				LDFLAGS="$LDFLAGS -L$motif/lib"
			fi
			AC_CHECK_LIB(Xm, XmString, [LIBS="-lXm $LIBS"],
				     [AC_ERROR(Motif library not found)])
			AC_DEFINE(WITH_MOTIF)
		fi

	  (Omit the `if test "$motif" != "no"' test if you cannot
	  build without Motif.  Also omit the AC_DEFINE(WITH_MOTIF).)

	* Sets prefix to /usr/athena, datadir to '${prefix}/lib', and
	  sbindir to '${prefix}/etc'.  You do not need to take these
	  into account in configure.in; just put in your Makefile.in:

		prefix=@prefix@
		exec_prefix=@exec_prefix@
		datadir=@datadir@
		sbindir=@sbindir@

	* Sets shell variables lbindir and lsbindir to /bin/athena and
	  /etc/athena respectively.  If your build system needs to
	  install files in /bin/athena or /etc/athena when built for
	  the Athena environment, use the following in your
	  configure.in:

		lbindir=${lbindir-'${bindir}'}
		lsbindir=${lsbindir-'${sbindir}'}
		AC_SUBST(lbindir)
		AC_SUBST(lsbindir)

	  And then in your Makefile.in:

		prefix=@prefix@
		exec_prefix=@exec_prefix@
		bindir=@bindir@
		sbindir=@sbindir@
		lbindir=@lbindir@
		lsbindir=@lsbindir@

The build environment will ensure that the following things are true:

	* The environment variable ATHENA_SYS is set to the current
	  platform's desired ATHENA_SYS value (e.g. "sun4m_54").

	* The environment variable HOSTTYPE is set to the current
	  platform name (e.g. "sun").

	* The environment variable CONFIG_SITE points to the Athena
	  config.site file.

Using a straight Makefile
-------------------------

For packages in the "packs" hierarchy, and in some parts of the
"third" hierarchy where we construct the build system by hand, we use
a straight Makefile, since feature tests are not necessary for the
packs hierarchy.

The build system will ensure that the same environment variables are
set as for using Autoconf.  In addition, the make variable CC will be
set to the appropriate compiler for the current platform when the
"all" target is invoked.  You should be sparing in your use of C
source code in packages using a straight Makefile, but for small,
portable C programs it's okay.

The subdirectories "platform/$HOSTTYPE" or "arch/$ATHENA_SYS" should
be used for platform or system-dependent components of a package using
a straight Makefile.

Start each Makefile with "# $Id: $" and "SHELL=/bin/sh".  The latter
is to work around a bug in the Irix make where it runs commands under
${SHELL} rather than /bin/sh.  Also necessary for Irix is using
"-mkdir -p" instead of "mkdir -p", since mkdir -p under Irix gives an
error when the directory already exists (in violation of IEEE 1003.2).
