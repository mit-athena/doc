This document describes guidelines for designing the build system for
a program or library in the Athena source tree (code we maintain, not
code we get from thrid parties).

First, here are some desirable properties of a build system for
programs or libraries.

	* It should use feature tests, not platform tests.

	* Once the appropriate configuration steps (e.g. running
	  configure) have been done, "make all" should generate all
	  automatically generated files without ever modifying any
	  source files.  (For example, "make all" should not try to
	  regenerate configure from configure.in, and a build system
	  should not wait until "make install" time to generate a file
	  which is going to be installed.)

	* "make install" should install all files appropriate for the
	  target directories without modifying any files in the build
	  tree.  In particular, it should not depend on the "all"
	  target.

	  "make install" should use the install command to install
	  files, not cp or tar or shell redirection.  It should avoid
	  using for loops to install multiple files unless there is
	  some preexisting reason to store that list of files as a
	  variable.  It should not generate the files it is installing.

	* "make clean" should clean all files generated by "make all."
	  "make distclean" should also delete files generated by the
	  configuration steps.

	* "make check" should run self-tests.  It should not assume
	  that the program has been installed, but it should assume
	  that the program has been built.  It should not modify the
	  build tree in any way; in particular, it should not depend
	  on the "all" target.  If there are no self-tests, "make
	  check" should not generate an error.

	* In a multi-directory source tree, it should be possible to
	  change to a subdirectory of the build tree and run any of
	  the aforementioned make targets with the same results as
	  having descended into that directory from above.  It is okay
	  to assume that previous parts of the build tree have been
	  built, but it is not okay to rely on make command-line
	  parameters passed in from the parent directory.

Your build system should use Autoconf.  Autoconf is not perfect, but
it's the only reasonable package out there for doing feature tests as
opposed to platform tests.  See the Autoconf info pages (available in
the default emacs info menu) for information about using Autoconf in
general.

When we build the program for the Athena environment, we will use a
config.site file (already written; you don't need to write it or point
to it) which does the following:

	* Sets the shell variable "athena" to "true".

	* Sets the appropriate compiler (using the CC environment
	  variable) as well as other compilation tools (yacc, lex) for
	  the platform in question.

	* Sets the appropriate X include path and library path for use
	  with AC_PATH_X.

	* Sets the appropriate value of with_motif for use with
	  AC_WITH_MOTIF, which should be used as follows if you need
	  to use the Motif library:

		# Near the beginning.
		AC_ARG_WITH(motif,
			    [  --with-motif=PREFIX     Compile with Motif],
			    [motif="$withval"], [motif=no])

		# Where you do checks for header files.
		AC_PATH_XTRA

		# Where you do checks for libraries.
		if test "$motif" != "no"; then
			if test "$motif" != "yes"; then
				CPPFLAGS="${CPPFLAGS} -I$motif/include"
				LDFLAGS="$LDFLAGS -L$motif/lib"
			fi
			AC_CHECK_LIB(Xm, XmString, [LIBS="-lXm $LIBS"],
				     [AC_ERROR(Motif library not found)])
			AC_DEFINE(WITH_MOTIF)
		fi

	* Sets the prefix to /usr/athena.

	* Sets shell variables lbindir and lsbindir to /bin/athena and
	  /etc/athena respectively.  If your build system needs to
	  install files in /bin/athena or /etc/athena when built for
	  the Athena environment, use the following in your
	  configure.in:

		lbindir=${lbindir-'$(exec_prefix)/bin'}
		lsbindir=${lsbindir-'$(exec_prefix)/sbin'}
		AC_SUBST(lbindir)
		AC_SUBST(lsbindir)

The build environment will ensure that the following things are true:

	* The environment variable ATHENA_SYS is set to the current
	  platform's desired value.

	* The environment variable CONFIG_SITE points to the Athena
	  config.site file.
